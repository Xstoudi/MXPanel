function format(data, indentChar, indentBase) {
    indentChar = indentChar ? indentChar : "\t";
    indentBase = indentBase ? indentBase : "";
    var formattedJSON = "";
    var dataObject = undefined;
    try {
        dataObject = JSON.parse(data);
    }
    catch (Error) {
        throw new TypeError("data parameter is not a valid JSON string !");
        return;
    }
    var dataIsArray = JSONtypeOf(dataObject) == "array";
    if (dataIsArray) {
        if (data.length == 0)
            return "[]";
        formattedJSON = "[";
    }
    else {
        var objectsCount_1 = 0;
        for (var obj in dataObject) {
            objectsCount_1++;
            break;
        }
        if (objectsCount_1 == 0)
            return "{}";
        formattedJSON = "{";
    }
    var objectsCount = 0;
    var keys = Object.keys(dataObject);
    for (var keyID = 0; keyID < keys.length; ++keyID) {
        if (objectsCount > 0)
            formattedJSON += ",";
        if (dataIsArray)
            formattedJSON += "\n" + indentBase + indentChar;
        else
            formattedJSON += "\n" + indentBase + indentChar + "\"" + keys[keyID] + "\": ";
        switch (JSONtypeOf(dataObject[keys[keyID]])) {
            case "array":
            case "object":
                formattedJSON += format(JSON.stringify(dataObject[keys[keyID]]), indentChar, indentBase + indentChar);
                break;
            case "number":
                formattedJSON += dataObject[keys[keyID]].toString();
                break;
            case "null":
                formattedJSON += "null";
                break;
            case "string":
                formattedJSON += "\"" + dataObject[keys[keyID]] + "\"";
                break;
            case "boolean":
                formattedJSON += dataObject[keys[keyID]];
                break;
        }
        objectsCount++;
    }
    if (dataIsArray)
        formattedJSON += "\n" + indentBase + "]";
    else
        formattedJSON += "\n" + indentBase + "}";
    return formattedJSON;
}
exports.format = format;
function JSONtypeOf(obj) {
    var typeOf = typeof (obj);
    if (typeOf == "object") {
        if (obj === null)
            return "null";
        if (Array.isArray(obj))
            return "array";
        return "object";
    }
    return typeOf;
}
